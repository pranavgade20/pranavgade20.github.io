[{"content":"I\u0026rsquo;m Pranav, and this is my blog :)\n","description":"Pranav's blog","id":0,"section":"","tags":null,"title":"About","uri":"https://pranavgade20.github.io/blog/about/"},{"content":"I participated in TrollCAT CTF with my team, Pwnzorz, this weekend, and we placed 2nd! Considering that this was our first CTF in quite a while, we did really well, thanks to my amazing teammates Aayushman, Nils, and Uzay-G. Here are the writeups for the challenges I completed.\nReversing - Solver The challenge, archived here, says can you guess the password? and gives you a binary to reverse. Using ghidra, we get the following disassembly:\n1 2 3 4 5 6 7 8 9 10  if ((int)input[3] + (int)*input == 100) { if ((int) input[0x12] + (int) input[1] == 0xd6) { if ((int) input[4] + (int) input[2] == 0xb2) { if ((char) (input[6] ^ input[5]) == 0x4c) { if ((int) input[8] - (int) input[7] == 0x11) { if ((int) input[10] - (int) input[9] == 0x3b) { if (((int) input[0xb] + (int) input[0xc]) - (int) input[0xd] == 0x45) { if (((int) input[0xe] + (int) input[0xf]) - (int) input[0x10] == 0x1f) { if (((int) input[0x11] + (int) input[0x10]) - (int) input[0x12] == 0x58) { if ((char) (input[0x15] ^ input[0x13] ^ input[0x14]) == 0x45) {   Now, you could be smart, and know that you are supposed to use the z3 solver, or you could be me. I thought that it did not look very complex, so I got a pen and paper and started solving it manually. For example, the first line wants the sum of the fourth and first characters to be 100. So, I just assumed both of them to equal 50, which is 2 in ASCII. Similarly, I solved all of them manually in about 30 minutes. Finally, one input satisfying all the conditions is 2lY2Y4xAR?zEEE@@aajEEE. Finally, after connecting to the server using nc, we are asked the key. Giving it 2lY2Y4xAR?zEEE@@aajEEE gives us the flag!\nWeb - Nested Exploration The challenge is a link, and a hint saying something nice happens when we submit 69 times.\nLooking at the requests in devtools, we can see that a POST request is made, followed by a GET request. The response of the POST request is empty, and the response of the GET request is the webpage with n forms, where n is the number of times we have submitted the form. I noticed that the request parameter has a number, and tried changing it to 69. However, this still gave me the same response. Then, I tried to look at the cookies set by the website. Sure enough, there was a cookie with a number that increased every time I submitted the form. I just set this to 68 and submitted the form, and sure enough, the flag was in a div in the end.\n","description":"Writeup for trollcat CTF from 6th Feb, 2021","id":1,"section":"posts","tags":["writeup","ctf"],"title":"TrollcatCTF Writeup","uri":"https://pranavgade20.github.io/blog/posts/trollcatctf-21-writeup/"},{"content":"block gate (from WPICTF 2020) This is a writeup for the \u0026lsquo;block gate\u0026rsquo; challenge from WPICTF 2020.\nThis is a forensics challenge, and we are given a minecraft world.\nAs soon as we enter the world, we see a column of water falling\u0026ndash;wrecking redstone circuits doubtlessly important to the whole affair.\nSo, after reloading the world, we can use gnembon\u0026rsquo;s carpet mod to stop the flow of water using the /tick freeze command. This is how it looks after that:\nNow, we can take our time in clearing out the water by filling that region with air using the /fillcommand:\nTo see the effects, we need to un-freeze the game using /tick freeze and boom, the water disappears:\nNow, we can start looking at the redstone circuit. A closer look shows us that two of the connections might be missing:And we have 2 vacant inputs for the output panel as well: We can try connecting them so the circuit is complete:(The repeaters are for extending the signal)\nFinally, we can look at the output. It looks like they are 7 segment displays, and a quick google search gives us the corresponding symbols:\nWe can see the 7 segment displays, and their corresponding symbols.\nNow we have practically solved the challenge. All we need to do is read the displays as they light up and we can get our flag! However, since this is repeating in a cyclic pattern, we need to figure out the beginning of the sequence. We do know that the flag is supposed to start with WPI{, so we can use that to find the start of the sequence.\nTo make writing down the sequence easier, we can use /tick rate 10 to halve the speed of the sequence(or /tick rate 5 for quarter speed and so on). Now all we need to do is write down the flag as it appears and we get our flag: WPI{}\n","description":"Writeup for trollcat CTF from 6th Feb, 2021","id":2,"section":"posts","tags":["writeup","ctf"],"title":"WpiCTF Writeup","uri":"https://pranavgade20.github.io/blog/posts/wpictf-20-writeup/"}]